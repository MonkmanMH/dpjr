[{"path":"https://monkmanmh.github.io/dpjr/articles/data_generate_cr25_order.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Data generation—CR25 orders","text":"set R chunks creates synthetic dataset presents variety data wrangling challenges, well interesting analytic opportunities. based experience late 1980s, time working wholesale company distributed LPs, cassettes, new-fangled compact discs wide range retailers. central table relational database shows details store’s orders…table needs compiled four quarterly CSV files. can linked tables stores.","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_generate_cr25_order.html","id":"the-scenario","dir":"Articles","previous_headings":"","what":"The Scenario","title":"Data generation—CR25 orders","text":"GitHub page data Walt Hickey’s article available GitHub.]","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_generate_cr25_order.html","id":"setup","dir":"Articles","previous_headings":"The Scenario","what":"Setup","title":"Data generation—CR25 orders","text":"first step install necessary packages. seed set number associated classic rock staple, future runs code generate data table. important, examples book based summary tables drawn master file.","code":"# tidyverse packages library(dplyr) library(readr) library(lubridate) library(ggplot2) # # utilities set.seed(8675309)"},{"path":"https://monkmanmh.github.io/dpjr/articles/data_generate_cr25_order.html","id":"input-data","dir":"Articles","previous_headings":"The Scenario","what":"Input data","title":"Data generation—CR25 orders","text":"create album list, created csv file artist percentage plays fields, using table article (displayed image; note appears error table, Boston lower rank higher percentage Queen Journey). also added representative album artist—used judgement . album biggest selling, famous, /one hit singles artist made. also opted “compilations” rule; one make case , one example, Rolling Stones might better accurately represented Hot Rocks. also added price field; albums released 1976 $7.98, released 1976-1981 $8.98, 1982 beyond $9.98. sole exception Pink Floyd’s double album Wall, priced $14.98. next step create csv file fictional stores. use names now-defunct Canadian chains record retailers active 70s 80s. can find listed Wikipedia List defunct Canadian companies left HMV, international brand late market. also assigned store one four regions (based cardinal points compass), gave store ID number.","code":"albumlist <- read_csv(dpjr::dpjr_data(\"cr25/cr25_538.csv\")) albumlist ## # A tibble: 25 × 6 ##     rank artist                        album               year pct_plays price ##    <dbl> <chr>                         <chr>              <dbl>     <dbl> <dbl> ##  1     1 Led Zeppelin                  IV (untitled)       1971       4.1  7.98 ##  2     2 Van Halen                     1984                1984       3.3  9.98 ##  3     3 The Rolling Stones            Sticky Fingers      1971       3    7.98 ##  4     4 Pink Floyd                    The Wall            1979       2.8 15.0  ##  5     5 Tom Petty & The Heartbreakers Hard Promises       1981       2.6  8.98 ##  6     6 AC/DC                         Back in Black       1980       2.3  8.98 ##  7     7 Aerosmith                     Toys in the Attic   1975       2.2  7.98 ##  8     8 ZZ Top                        Eliminator          1983       1.9  9.98 ##  9     9 The Beatles                   Abbey Road          1969       1.9  7.98 ## 10    10 Queen                         Night at the Opera  1975       1.8  7.98 ## # … with 15 more rows storelist <- read_csv(dpjr::dpjr_data(\"cr25/cr25_storelist.csv\"))  head(storelist) ## # A tibble: 6 × 4 ##   chain               region open_date  store.id ##   <chr>               <chr>  <date>     <chr>    ## 1 A&A Records         east   2019-01-01 X001     ## 2 A&A Records         east   2019-01-01 X002     ## 3 A&A Records         east   2019-01-01 X003     ## 4 A&A Records         east   2019-01-01 X004     ## 5 A&A Records         east   2019-01-01 X005     ## 6 Kelly's Stereo Mart east   2019-01-01 X017 storelist %>%   group_by(chain, region) %>%   tally() ## # A tibble: 12 × 3 ## # Groups:   chain [4] ##    chain               region     n ##    <chr>               <chr>  <int> ##  1 A&A Records         east       5 ##  2 A&A Records         south      5 ##  3 A&B Sound           north      1 ##  4 A&B Sound           west       5 ##  5 Kelly's Stereo Mart east       2 ##  6 Kelly's Stereo Mart north      2 ##  7 Kelly's Stereo Mart south      5 ##  8 Kelly's Stereo Mart west       2 ##  9 Sam the Record Man  east       3 ## 10 Sam the Record Man  north      2 ## 11 Sam the Record Man  south     10 ## 12 Sam the Record Man  west       3 storelist %>%   group_by(region) %>%   tally() ## # A tibble: 4 × 2 ##   region     n ##   <chr>  <int> ## 1 east      10 ## 2 north      5 ## 3 south     20 ## 4 west      10 storelist %>%   group_by(chain) %>%   tally() ## # A tibble: 4 × 2 ##   chain                   n ##   <chr>               <int> ## 1 A&A Records            10 ## 2 A&B Sound               6 ## 3 Kelly's Stereo Mart    11 ## 4 Sam the Record Man     18"},{"path":"https://monkmanmh.github.io/dpjr/articles/data_generate_cr25_order.html","id":"create-order","dir":"Articles","previous_headings":"","what":"Create order","title":"Data generation—CR25 orders","text":"Now run multiple orders…","code":"# order date # based on https://cran.r-project.org/web/packages/lubridate/vignettes/lubridate.html  jan01 <- ymd(\"2019-01-01\") startdate <- as_date(floor_date(jan01, \"year\")) enddate <- as_date(ceiling_date(jan01, \"year\") - days(1)) daterange <- tibble(orderdate = as_date(c(startdate:enddate)))  orderdate_fun <- function(){  daterange %>%   sample_n(1) %>%   pull(orderdate)  }    # set the size of the order based on year quarter # - same number of orders but biggest in 4th quarter, smallest in 1st order_mean_fun <- function(orderdate){   order_qtr <- quarter(orderdate)   order_mean <- case_when(     order_qtr == 1 ~ 4,     order_qtr == 4 ~ 6,     TRUE ~ 5   ) }  # function to randomly select the store store_fun <- function(){  storelist %>%   sample_n(1) %>%   pull(store.id)  }     # album_order_fun  # - `rpois` sets the mean value of poisson distribution from which random value is pulled  album_order_fun <- function(...){   sample_n(albumlist, 1, weight = pct_plays) %>%     select(artist, album, price) %>%   mutate(format = sample(c(\"lp\", \"cass\"), 1, prob = c(0.33, 0.67)),          qty = rpois(1, 4)   ) }   # now with order date and store id appended after the run  order_fun <- function(){      orderdate <- orderdate_fun()  # conditional on store open date being before random order date     orderstore.id <- store_fun()      store.opendate <- storelist %>%     filter(store.id == orderstore.id) %>%     pull(open_date)    if(store.opendate < orderdate){      order_mean <- order_mean_fun(orderdate)     n = rpois(1, order_mean)       # define blank form     order_final <- data.frame(artist = as.character(),                           album = as.character(),                           price = as.double(),                           format = as.character(),                           qty = as.integer(),                           stringsAsFactors = FALSE)        for(i in 1:n){     order_final[i, ] <- album_order_fun()     }      order_final <- order_final %>%     mutate(orderdate = orderdate,            store.id = orderstore.id)      order_final      # end if   } # end function } # run one order... order_fun() ##              artist             album price format qty  orderdate store.id ## 1 Steve Miller Band Fly Like an Eagle  8.98   cass   5 2019-07-31     X026 ## 2                U2               War  9.98     lp   6 2019-07-31     X026 ## 3            Boston            Boston  8.98     lp   4 2019-07-31     X026 ## 4            ZZ Top        Eliminator  9.98   cass   5 2019-07-31     X026 ## 5    Lynyrd Skynyrd    Second Helping  7.98     lp   2 2019-07-31     X026 ## 6     Fleetwood Mac           Rumours  8.98     lp   1 2019-07-31     X026 ## 7         The Doors         The Doors  7.98     lp   3 2019-07-31     X026 m <- 750   order_multi <- data.frame(artist = as.character(),                           album = as.character(),                           price = as.double(),                           format = as.character(),                           qty = as.integer(),                           orderdate = as_date(as.character()),                           store.id = as.character(),                           stringsAsFactors = FALSE)        for(i in 1:m){     order_final <- order_fun()     order_multi <- rbind(order_multi, order_final)   }     #write_csv(order_multi, \"cr25_order_multi.csv\")   #write_rds(order_multi, \"cr25_order_multi.rds\") head(order_multi) ##               artist             album price format qty  orderdate store.id ## 1          Aerosmith Toys in the Attic  7.98   cass   1 2019-11-13     X008 ## 2             Boston            Boston  8.98   cass   2 2019-11-13     X008 ## 3              Heart   Dreamboat Annie  7.98   cass   1 2019-11-13     X008 ## 4 The Rolling Stones    Sticky Fingers  7.98     lp   5 2019-11-13     X008 ## 5     Lynyrd Skynyrd    Second Helping  7.98   cass   5 2019-11-13     X008 ## 6         Pink Floyd          The Wall 14.98   cass   3 2019-11-13     X008"},{"path":"https://monkmanmh.github.io/dpjr/articles/data_generate_cr25_order.html","id":"summary-tables","dir":"Articles","previous_headings":"Create order","what":"Summary tables","title":"Data generation—CR25 orders","text":"Build large scale summary table","code":"order_multi %>%   group_by(store.id, orderdate) %>%   tally() order_multi %>%   group_by(artist) %>%   summarise(qty = sum(qty)) %>%   arrange(desc(qty)) ## # A tibble: 25 × 2 ##    artist                          qty ##    <chr>                         <int> ##  1 Led Zeppelin                   1198 ##  2 The Rolling Stones             1007 ##  3 Van Halen                       941 ##  4 Pink Floyd                      916 ##  5 AC/DC                           789 ##  6 Tom Petty & The Heartbreakers   720 ##  7 Aerosmith                       644 ##  8 The Beatles                     613 ##  9 Boston                          606 ## 10 Foreigner                       551 ## # … with 15 more rows order_multi %>%   mutate(order_price = qty * price) %>%   group_by(artist, format) %>%   summarise(qty = sum(qty),             cost = sum(order_price)) %>%   arrange(desc(qty)) order_multi %>%   mutate(order_price = qty * price) %>%   left_join(storelist, by = \"store.id\") %>%   group_by(chain) %>%   summarise(qty = sum(qty),             cost = sum(order_price)) %>%   arrange(desc(qty)) ## # A tibble: 4 × 3 ##   chain                 qty   cost ##   <chr>               <int>  <dbl> ## 1 Sam the Record Man   6021 54739. ## 2 A&A Records          3459 31789. ## 3 Kelly's Stereo Mart  3416 30903. ## 4 A&B Sound            1744 15751. order_multi %>%   mutate(order_price = qty * price) %>%   left_join(storelist, by = \"store.id\") %>%   group_by(region) %>%   summarise(qty = sum(qty),             cost = sum(order_price)) %>%   mutate(pct_of_sales = cost / sum(cost) * 100) %>%   arrange(desc(qty)) ## # A tibble: 4 × 4 ##   region   qty   cost pct_of_sales ##   <chr>  <int>  <dbl>        <dbl> ## 1 south   6432 58637.         44.0 ## 2 east    3433 31259.         23.5 ## 3 west    3077 28000.         21.0 ## 4 north   1698 15284.         11.5"},{"path":"https://monkmanmh.github.io/dpjr/articles/data_generate_cr25_order.html","id":"future-development","dir":"Articles","previous_headings":"","what":"Future development","title":"Data generation—CR25 orders","text":"also expanded include additional years (trends embedded), inventory management, customer relationship management (CRM).","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_licenses.html","id":"licenses","dir":"Articles","previous_headings":"","what":"Licenses","title":"Data licenses","text":"data package licensed following ways:","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_licenses.html","id":"original-to-dpjr","dir":"Articles","previous_headings":"Licenses","what":"Original to {dpjr}","title":"Data licenses","text":"data files created {dpjr} package Martin Monkman licensed Creative Commons Attribution-NonCommercial-ShareAlike 2.5 Canada License.","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_licenses.html","id":"sourced-from-other-r-packages","dir":"Articles","previous_headings":"Licenses","what":"Sourced from other R packages","title":"Data licenses","text":"Data sourced R packages covered license package.","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_licenses.html","id":"sourced-from-open-repositories","dir":"Articles","previous_headings":"Licenses","what":"Sourced from open repositories","title":"Data licenses","text":"Data sourced repositories covered license repository, noted individually vignette “Data list”.","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"raw-data","dir":"Articles","previous_headings":"","what":"Raw data","title":"Data list","text":"page listing raw data files {dpjr} package. files can accessed using appropriate “read” function, package function dpjr_data() providing path. example, full list files follows:","code":"df_mpg <- read.csv(dpjr_data(\"mpg.csv\")) dpjr::dpjr_data() ## [1] \"authors_count_fwf.txt\" \"authors_fwf.txt\"       \"authors2_fwf.txt\"      ## [4] \"cr25\"                  \"gapminder.csv\"         \"JCUSH.txt\"             ## [7] \"mpg.csv\"               \"mtcars.csv\"            \"penguins_fwf.txt\""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"licenses","dir":"Articles","previous_headings":"","what":"Licenses","title":"Data list","text":"data package covered open license. information specific license data set package, please refer vignette “Data licenses”.","code":""},{"path":[]},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"authors_fwf-txt-authors2_fwf-txt","dir":"Articles","previous_headings":"Files","what":"authors_fwf.txt; authors2_fwf.txt","title":"Data list","text":"pair fixed-width files containing information ten authors United States America: “name” “state birth”, two-letter abbreviation US state author born “unique_id”, randomly generated personal ID (similar national individual identification number used different countries). variables follows:","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"cr25","dir":"Articles","previous_headings":"Files","what":"cr25","title":"Data list","text":"files within subdirectory cr25 follows: information files see vignette “Data generation—CR25 orders”.","code":"list.files(dpjr::dpjr_data(\"cr25\")) ## [1] \"cr25_538.csv\"         \"cr25_order_multi.csv\" \"cr25_order_multi.rds\" ## [4] \"cr25_storelist.csv\""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"gapminder-csv","dir":"Articles","previous_headings":"Files","what":"gapminder.csv","title":"Data list","text":"csv version dataset {gapminder} package","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"jcush-txt","dir":"Articles","previous_headings":"Files","what":"JCUSH.txt","title":"Data list","text":"Statistics Canada made available anonymized Public-Use Microdata File (PUMF) Joint Canada/United States Survey Health, telephone survey conducted late 2002 early 2003. 8,688 respondents survey, 3,505 Canadians 5,183 Americans. PUMF fixed-width file named “JCUSH.txt”. line 552 columns length. webpage survey, including PUMF file, data dictionary, methodological notes, : https://www150.statcan.gc.ca/n1/pub/82m0022x/2003001/4069119-eng.htm License: Statistics Canada Open License Source: Statistics Canada, Joint Canada/United States Survey Health 2002-03, 2004. Reproduced distributed “” basis permission Statistics Canada.","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"mpg-csv","dir":"Articles","previous_headings":"Files","what":"mpg.csv","title":"Data list","text":"csv version famous mpg dataset, included {ggplot2} package","code":""},{"path":"https://monkmanmh.github.io/dpjr/articles/data_list.html","id":"penguins_fwf-txt","dir":"Articles","previous_headings":"Files","what":"penguins_fwf.txt","title":"Data list","text":"fixed-width version {palmerpenguins} dataset 8 different variables, described table : fixed-width file created minimize white space. first four last two rows data look like : Note first row variable names. common fixed-width files. License: Data available CC-0 license accordance Palmer Station LTER Data Policy LTER Data Access Policy Type data.","code":"readLines(dpjr::dpjr_data(\"penguins_fwf.txt\"), n = 4) ## [1] \"Adelie   Torgersen39.118.71813750male  2007\" ## [2] \"Adelie   Torgersen39.517.41863800female2007\" ## [3] \"Adelie   Torgersen40.318.01953250female2007\" ## [4] \"Adelie   Torgersen                     2007\" tail(readLines(dpjr::dpjr_data(\"penguins_fwf.txt\")), 2) ## [1] \"ChinstrapDream    50.819.02104100male  2009\" ## [2] \"ChinstrapDream    50.218.71983775female2009\""},{"path":"https://monkmanmh.github.io/dpjr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Monkman. Maintainer.","code":""},{"path":"https://monkmanmh.github.io/dpjr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Monkman M (2022). dpjr: Companion data book Data Preparation Journey: Finding Way R. https://github.com/MonkmanMH/dpjr, https://monkmanmh.github.io/dpjr.","code":"@Manual{,   title = {dpjr: Companion data for the book The Data Preparation Journey: Finding Your Way With R},   author = {Martin Monkman},   year = {2022},   note = {https://github.com/MonkmanMH/dpjr, https://monkmanmh.github.io/dpjr}, }"},{"path":"https://monkmanmh.github.io/dpjr/index.html","id":"dpjr","dir":"","previous_headings":"","what":"Companion data for the book The Data Preparation Journey: Finding Your Way With R","title":"Companion data for the book The Data Preparation Journey: Finding Your Way With R","text":"Companion Data book Data Preparation Journey: Finding Way R work progress, published Chapman & Hall/CRC Press point future.","code":""},{"path":"https://monkmanmh.github.io/dpjr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Companion data for the book The Data Preparation Journey: Finding Your Way With R","text":"download install {dpjr} package, need {remotes} package: {dpjr} installed, load using library() function:","code":"install.packages(\"remotes\") remotes::install_github(\"monkmanmh/dpjr\") library(dpjr)"},{"path":"https://monkmanmh.github.io/dpjr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Companion data for the book The Data Preparation Journey: Finding Your Way With R","text":"two groups datasets package: pre-rendered? tables, raw files.","code":""},{"path":"https://monkmanmh.github.io/dpjr/index.html","id":"raw-data-files","dir":"","previous_headings":"Usage","what":"Raw data files","title":"Companion data for the book The Data Preparation Journey: Finding Your Way With R","text":"convenience function dpjr_data() generates path raw data file, independent specific location user’s computer. example, read CSV file “mtcars.csv”: alternative approach access files using system.file() function. Example:","code":"df_mtcars <- read.csv(dpjr::dpjr_data(\"mtcars.csv\")) system.file(\"extdata\", package = \"dpjr\")  system.file(\"extdata\", \"mtcars.csv\", package = \"dpjr\")  read.csv(system.file(\"extdata\", \"mtcars.csv\", package = \"dpjr\"))"},{"path":"https://monkmanmh.github.io/dpjr/index.html","id":"data-files","dir":"","previous_headings":"","what":"Data files","title":"Companion data for the book The Data Preparation Journey: Finding Your Way With R","text":"list raw data files can found . link readme.md?","code":""},{"path":"https://monkmanmh.github.io/dpjr/index.html","id":"licenses","dir":"","previous_headings":"","what":"Licenses","title":"Companion data for the book The Data Preparation Journey: Finding Your Way With R","text":"data files package created Martin Monkman licensed Creative Commons Attribution-NonCommercial-ShareAlike 2.5 Canada License. following exceptions:","code":""},{"path":"https://monkmanmh.github.io/dpjr/reference/dpjr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Get file path to data files — dpjr_data","title":"Get file path to data files — dpjr_data","text":"dpjr comes bundled various data files `inst/extdata` directory. function make easy access.","code":""},{"path":"https://monkmanmh.github.io/dpjr/reference/dpjr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get file path to data files — dpjr_data","text":"","code":"dpjr_data(path = NULL)"},{"path":"https://monkmanmh.github.io/dpjr/reference/dpjr_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Get file path to data files — dpjr_data","text":"function adapted `readxl::readxl_example()` `palmerpenguins::path_to_file`.","code":""},{"path":"https://monkmanmh.github.io/dpjr/reference/dpjr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get file path to data files — dpjr_data","text":"path Name file quotes extension; example `\"mpg.csv\"` work. `NULL`, example files listed.","code":""},{"path":"https://monkmanmh.github.io/dpjr/reference/dpjr_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get file path to data files — dpjr_data","text":"","code":"# return a list of all the files in the package dpjr_data() #> [1] \"JCUSH.txt\"             \"authors2_fwf.txt\"      \"authors_count_fwf.txt\" #> [4] \"authors_fwf.txt\"       \"cr25\"                  \"gapminder.csv\"         #> [7] \"mpg.csv\"               \"mtcars.csv\"            \"penguins_fwf.txt\"      # # return the full path of the named file dpjr_data(\"mpg.csv\") #> [1] \"/home/runner/work/_temp/Library/dpjr/extdata/mpg.csv\" # # return the head (first 6 rows) of the named file head(read.csv(dpjr_data(\"mpg.csv\"))) #>   manufacturer model displ year cyl      trans drv cty hwy fl   class #> 1         audi    a4   1.8 1999   4   auto(l5)   f  18  29  p compact #> 2         audi    a4   1.8 1999   4 manual(m5)   f  21  29  p compact #> 3         audi    a4   2.0 2008   4 manual(m6)   f  20  31  p compact #> 4         audi    a4   2.0 2008   4   auto(av)   f  21  30  p compact #> 5         audi    a4   2.8 1999   6   auto(l5)   f  16  26  p compact #> 6         audi    a4   2.8 1999   6 manual(m5)   f  18  26  p compact"}]
